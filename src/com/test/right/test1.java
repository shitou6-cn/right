package com.test.right;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.HTTP;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.*;

//主程序  启动后 地址http://localhost:8081/test/test
//发送post请求 json
//{
//	"channelCallbackUrl": "http://localhost:8081/test/test4",
//	"channelOrderId": "20201104112921415968",
//	"cid": "user",
//	"number": ["15233623569", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "17556956855", "13552653655", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325", "15669665325"],
//	"operator": "5"
//}
public class test1 extends HttpServlet {
    //随机数方法
    public static Random r = new Random();
    //
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        System.out.println("得到一个get请求并转为post请求");
        this.doPost(req, resp);
    }

    //得到一个post请求
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
//        System.out.println("接收到一个post请求");

        //接请求

        //new json对象 以便后期解析
        JSONObject json = new JSONObject();
        //json集合
        JSONArray list = new JSONArray();
        //用来临时接请求
        BufferedReader br;
        //将接到的请求放到
        br = new BufferedReader(new InputStreamReader(request.getInputStream()));
        //用来暂时接json
        String line = null;
        //用来接请求的json
        StringBuilder sb = new StringBuilder();
        while ((line = br.readLine()) != null) {
            //将获取到的json放到string里面
            sb.append(line);
        }
        //string转json
        json = JSONObject.parseObject(sb.toString());
        //json转String
        //jsonStr = JSONObject.toJSONString(json);
        //拿到本次发送的所有目标号码  jsonListArrary
        list = json.getJSONArray("number");
        //用来接收所有要发送的目标号段
        List<String> testList = new ArrayList<String>();
        for (int i = 0; i < list.size(); i++) {
            //强转 然后放入list<String>
            testList.add((String) list.get(i));
        }
        //拿到目标post地址
        String url = json.getString("channelCallbackUrl");
        //生成一个订单号  当前毫秒17位+3个0-9的随机数=20位的订单号
        String order = new SimpleDateFormat("yyyyMMddHHmmssSSS").format(new Date()) + r.nextInt(9) + r.nextInt(9) + r.nextInt(9);
        //响应格式
        response.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "text/html;charset=UTF-8");
        //生成响应流
        PrintWriter writer = response.getWriter();
        //用于处理json
        JSONObject o = new JSONObject();
        //响应内容
        o.put("code", "200");
        o.put("message", "successfully");
        o.put("order_id", order);
        writer.write(o.toString());
        //关闭响应流
        writer.close();

        //开启了另一个线程  不断的
        threadTest(url, testList, order);
    }

    //传入 post的url和号段集合和订单号  新建一个线程
    public static void threadTest(final String url, final List<String> number, final String order) {
        new Thread() {
            @Override
            public void run() {
                //根据随机数得出本次成功率 0 97 1 98 2 99  随机数0-2
                int rd = r.nextInt(3);
                //得到一个成功的条数  小数
                double x = (double) number.size() * ((((double) 97 + rd) / 100));
                //临时存放 发送失败的下标   去重
                Set<Integer> sub = new HashSet<Integer>();
                while (true) {
                    sub.add(r.nextInt(number.size()));
                    //判断条件   会失败多少条  现有的-成功的==失败的条数   四舍五入
                    if (sub.size() > Math.ceil(number.size() - x)) {
                        break;
                    }
                }
                //用来得到本次订单所有的post请求的json
                List<JSONObject> jsonList = new ArrayList<JSONObject>();
                //开始发送post请求给url
                for (int i = 0; i < number.size(); i++) {


                    //如果当前下标为失败的  更改状态
                    if (sub.contains(i)) {
                        //拼成json
                        JSONObject o = new JSONObject();
                        //订单号
                        o.put("uid", order);
                        //成功状态  1 成功  2 失败
                        o.put("status", "2");
                        //失败原因
                        o.put("msg", "2");
                        //空
                        o.put("sign", "123");
                        //空
                        o.put("orderId", "123");
                        //目标手机号码  根据当前循环下标取值
                        o.put("phone", number.get(i));
                        jsonList.add(o);

                    } else {

                        //拼成json
                        JSONObject o = new JSONObject();
                        //订单号
                        o.put("uid", order);
                        //成功状态  1 成功  2 失败
                        o.put("status", "1");
                        //失败原因  1 成功
                        o.put("msg", "1");
                        //空
                        o.put("sign", "123");
                        //空
                        o.put("orderId", "123");
                        //目标手机号码  根据当前循环下标取值
                        o.put("phone", number.get(i));
                        jsonList.add(o);
                    }

                }
//                System.out.println(jsonList);
//                threadTest1(url, jsonList);

                for (JSONObject jsonParam : jsonList) {

                    String body = "";

                    //创建httpclient对象
                    CloseableHttpClient client = HttpClients.createDefault();
                    //创建post方式请求对象
                    HttpPost httpPost = new HttpPost(url);
                    //装填参数
                    StringEntity s = null;
                    try {
                        s = new StringEntity(jsonParam.toString(), "utf-8");

                        s.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,
                                "application/json"));
                        //设置参数到请求对象中
                        httpPost.setEntity(s);
                        //执行请求操作
                        client.execute(httpPost);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }


            }
        }.start();
    }

    //新开的一个线程   传入要发送的post的url地址 和 json集合
    public static void threadTest1(final String url, final List<JSONObject> jsonList) {
        new Thread() {
            @Override
            public void run() {
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                int reSend = 10;
                //循环传入的所有json
                for (JSONObject jsonParam : jsonList) {

                    String body = "";

                    //创建httpclient对象
                    CloseableHttpClient client = HttpClients.createDefault();
                    //创建post方式请求对象
                    HttpPost httpPost = new HttpPost(url);
                    //装填参数
                    StringEntity s = null;
                    try {
                        s = new StringEntity(jsonParam.toString(), "utf-8");

                        s.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE,
                                "application/json"));
                        //设置参数到请求对象中
                        httpPost.setEntity(s);
                        //执行请求操作
                        client.execute(httpPost);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();
    }
}


